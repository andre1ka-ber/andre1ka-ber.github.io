{"version":3,"sources":["constants/navigationLinks.ts","components/Navigation/NavigationItem.tsx","enums/TodoStatusEnum.ts","redux/actionCreators/appActions.ts","redux/selectors/appSelectors.ts","components/Navigation/ThemeChanger.tsx","components/Navigation/NavigationList.tsx","redux/actionCreators/todosActions.ts","components/Todo/TodoForm.tsx","components/Todo/TodoItem.tsx","redux/selectors/todosSelectors.ts","components/Todo/TodoList.tsx","views/Main.tsx","components/FetchTodoForm.tsx","components/Loader.tsx","components/Todo/TodoStatus.tsx","redux/actionCreators/fetchTodosActions.ts","components/FetchedTodoItem.tsx","views/FetchedTodos.tsx","views/CompletedTodos.tsx","components/UserCard.tsx","components/CustomModal.tsx","App.tsx","reportWebVitals.ts","redux/sagas.ts","redux/reducers/todosReducer.ts","redux/reducers/fetchedTodosReducer.ts","redux/reducers/appReducer.ts","redux/reducers/rootReducer.ts","redux/store.ts","index.tsx"],"names":["navigationLinks","icon","title","path","NavigationItem","children","classString","onClick","location","useLocation","role","className","pathname","defaultProps","TodoStatusEnum","changeAppTheme","createAction","displayModal","hideModal","enableModalLoading","disableModalLoading","setModalContent","content","payload","all","state","app","appTheme","theme","shouldDisplayModal","modal","shouldDisplay","modalContent","modalLoading","loading","ThemeChanger","dispatcher","useDispatch","currentTheme","useSelector","useState","themeIcon","setThemeIcon","useEffect","NavigationList","map","item","to","src","height","width","alt","addTodo","id","Date","now","completed","completeTodo","returnCompletedTodo","deleteTodo","fetchTodos","options","setFetchedTodos","todos","showFetchingLoader","hideFetchingLoader","TodoForm","todoTitle","setTodoTitle","onSubmit","event","preventDefault","trim","type","placeholder","onChange","target","value","TodoItem","todo","data-testid","checked","confirm","todosState","activeTodoItems","completedTodoItems","fetchedTodosState","fetchedTodos","fetchedTodosItems","fetchingLoading","TodoList","todoItems","length","Main","usersElements","i","push","FetchTodoForm","userId","count","fetchForm","setFetchForm","inputChangeHandler","prevState","name","Number","htmlFor","COMPLETED","UNCOMPLETED","step","Loader","loaderColor","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","TodoStatus","status","statusIcon","statusColor","statusText","fetchTodoUser","FetchedTodoItem","user","FetchedTodos","CompletedTodos","completedTodos","UserCard","userData","username","email","CustomModal","isLoading","clickHandler","stopPropagation","onKeyUp","App","rootHtmlElement","document","querySelector","classList","add","remove","exact","component","progressClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","todosFetchWorker","fetchTodoUserWorker","sagaWatcher","fetchTodosFromApi","a","fetch","response","json","fetchUserData","defineFetchingTodoOptions","object","Object","entries","forEach","optionName","optionValue","join","action","put","call","takeLatest","todosReducer","createReducer","builder","addCase","filter","toast","fetchedTodosReducer","initialState","localStorage","getItem","appReducer","setItem","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","middlewares","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","concat","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.09da334c.chunk.js","sourcesContent":["export const navigationLinks = [\r\n  {\r\n    icon: \"fas fa-home\",\r\n    title: \"Главная\",\r\n    path: \"/\",\r\n  },\r\n  {\r\n    icon: \"fas fa-list-ul\",\r\n    title: \"Список завершенных\",\r\n    path: \"/completed\",\r\n  },\r\n  {\r\n    icon: \"fas fa-layer-group\",\r\n    title: \"Тестовые данные\",\r\n    path: \"/fetched\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\ninterface NavigationItemProps {\r\n  title: string;\r\n  icon?: string;\r\n  path?: string;\r\n  classString?: string;\r\n  onClick?(): void;\r\n}\r\n\r\nconst NavigationItem: React.FC<NavigationItemProps> = ({\r\n  children,\r\n  icon,\r\n  path,\r\n  title,\r\n  classString,\r\n  onClick,\r\n}) => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <div\r\n      role=\"presentation\"\r\n      className={`navigation-item ${\r\n        location.pathname === path ? \"active\" : \"\"\r\n      } ${classString}`}\r\n      onClick={onClick}\r\n    >\r\n      <div className=\"navigation-item-icon\">\r\n        {icon ? <i className={icon} /> : children}\r\n      </div>\r\n      <div className=\"navigation-item-title\">{title}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nNavigationItem.defaultProps = {\r\n  icon: \"\",\r\n  path: \"\",\r\n  classString: \"\",\r\n  onClick() {\r\n    return null;\r\n  },\r\n};\r\n\r\nexport default NavigationItem;\r\n","export enum TodoStatusEnum {\r\n  COMPLETED = 1,\r\n  UNCOMPLETED = 2,\r\n}\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const changeAppTheme = createAction(\"CHANGE_APP_THEME\");\r\n\r\nexport const displayModal = createAction(\"DISPLAY_MODAL\");\r\nexport const hideModal = createAction(\"HIDE_MODAL\");\r\nexport const enableModalLoading = createAction(\"ENABLE_MODAL_LOADING\");\r\nexport const disableModalLoading = createAction(\"DISABLE_MODAL_LOADING\");\r\nexport const setModalContent = createAction(\r\n  \"SET_MODAL_CONTENT\",\r\n  (content: any) => ({\r\n    payload: content,\r\n  }),\r\n);\r\n","import { RootState } from \"../store\";\r\n\r\nexport const all = (state: RootState) => state.app;\r\nexport const appTheme = (state: RootState) => all(state).theme;\r\n\r\nexport const shouldDisplayModal = (state: RootState) => all(state).modal.shouldDisplay;\r\nexport const modalContent = (state: RootState) => all(state).modal.content;\r\nexport const modalLoading = (state: RootState) => all(state).modal.loading;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { changeAppTheme } from \"../../redux/actionCreators/appActions\";\r\nimport { appTheme } from \"../../redux/selectors/appSelectors\";\r\nimport NavigationItem from \"./NavigationItem\";\r\n\r\nconst ThemeChanger: React.FC = () => {\r\n  const dispatcher = useDispatch();\r\n  const currentTheme = useSelector(appTheme);\r\n  const [themeIcon, setThemeIcon] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (currentTheme === \"light\") {\r\n      setThemeIcon(\"fas fa-sun\");\r\n    } else {\r\n      setThemeIcon(\"fas fa-moon\");\r\n    }\r\n  }, [currentTheme]);\r\n\r\n  const changeTheme = () => {\r\n    dispatcher(changeAppTheme());\r\n  };\r\n\r\n  return (\r\n    <NavigationItem\r\n      icon={themeIcon}\r\n      title=\"Изменить тему\"\r\n      onClick={changeTheme}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ThemeChanger;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { navigationLinks } from \"../../constants/navigationLinks\";\r\nimport NavigationItem from \"./NavigationItem\";\r\nimport ThemeChanger from \"./ThemeChanger\";\r\n\r\nconst NavigationList: React.FC = () => (\r\n  <div className=\"navigation\">\r\n    {navigationLinks.map((item) => (\r\n      <NavLink to={item.path} key={item.icon}>\r\n        <NavigationItem icon={item.icon} title={item.title} path={item.path} />\r\n      </NavLink>\r\n    ))}\r\n\r\n    <div className=\"bottom-items\">\r\n      <ThemeChanger />\r\n      <NavigationItem\r\n        title=\"Made with ReactJS + TypeScript\"\r\n        classString=\"about-me-item\"\r\n      >\r\n        <img\r\n          src=\"logo192.png\"\r\n          height={32}\r\n          width={32}\r\n          alt=\"react-logo\"\r\n          className=\"spin-logo\"\r\n        />\r\n      </NavigationItem>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default NavigationList;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { IFetchedTodo } from \"../../interfaces/todo\";\r\nimport { IFetchTodoForm } from \"../../interfaces/fetchTodo\";\r\n\r\nexport const addTodo = createAction(\"ADD_TODO\", (title: string) => ({\r\n  payload: {\r\n    title,\r\n    id: Date.now(),\r\n    completed: false,\r\n  },\r\n}));\r\nexport const completeTodo = createAction(\"COMPLETE_TODO\", (id: number) => ({\r\n  payload: { id },\r\n}));\r\nexport const returnCompletedTodo = createAction(\r\n  \"RETURN_COMPLETED_TODO\",\r\n  (id: number) => ({\r\n    payload: { id },\r\n  }),\r\n);\r\nexport const deleteTodo = createAction(\"DELETE_TODO\", (id: number) => ({\r\n  payload: { id },\r\n}));\r\nexport const fetchTodos = createAction(\r\n  \"FETCH_TODOS\",\r\n  (options: IFetchTodoForm) => ({\r\n    payload: options,\r\n  }),\r\n);\r\nexport const setFetchedTodos = createAction(\r\n  \"SET_FETCHED_TODOS\",\r\n  (todos: IFetchedTodo[]) => ({\r\n    payload: todos,\r\n  }),\r\n);\r\nexport const showFetchingLoader = createAction(\"SHOW_FETCHING_LOADER\");\r\nexport const hideFetchingLoader = createAction(\"HIDE_FETCHING_LOADER\");\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../../redux/actionCreators/todosActions\";\r\n\r\nconst TodoForm: React.FC = () => {\r\n  const dispatcher = useDispatch();\r\n  const [todoTitle, setTodoTitle] = useState(\"\");\r\n\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setTodoTitle(event.target.value);\r\n  };\r\n\r\n  const clickHandler = (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n    if (!todoTitle) {\r\n      return;\r\n    }\r\n    dispatcher(addTodo(todoTitle.trim()));\r\n    setTodoTitle(() => \"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"todo-input-wrapper\" onSubmit={clickHandler}>\r\n      <h3 className=\"label-md\">Добавить новую задачу</h3>\r\n      <div className=\"todo-input-form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Название задачи\"\r\n          onChange={changeHandler}\r\n          value={todoTitle}\r\n        />\r\n        <button type=\"submit\">Добавить</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  deleteTodo,\r\n  completeTodo,\r\n  returnCompletedTodo,\r\n} from \"../../redux/actionCreators/todosActions\";\r\nimport { ITodo } from \"../../interfaces/todo\";\r\n\r\ndeclare let confirm: (question: string) => boolean;\r\n\r\ninterface TodoItemProps {\r\n  todo: ITodo;\r\n}\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = ({ todo }) => {\r\n  const dispatcher = useDispatch();\r\n\r\n  const deleteHandler = () => {\r\n    if (confirm(\"Вы уверены?\")) {\r\n      dispatcher(deleteTodo(todo.id));\r\n    }\r\n  };\r\n\r\n  const changeHandler = () => {\r\n    if (!todo.completed) {\r\n      dispatcher(completeTodo(todo.id));\r\n      return;\r\n    }\r\n\r\n    dispatcher(returnCompletedTodo(todo.id));\r\n  };\r\n\r\n  return (\r\n    <div className={`todo-list-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n      <input\r\n        type=\"checkbox\"\r\n        data-testid=\"status-checkbox\"\r\n        checked={todo.completed}\r\n        onChange={changeHandler}\r\n      />\r\n      <h5 role=\"contentinfo\">{todo.title}</h5>\r\n      <button\r\n        className=\"todo-list-item-button\"\r\n        type=\"button\"\r\n        onClick={deleteHandler}\r\n      >\r\n        <i className=\"fas fa-times\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import { RootState } from \"../store\";\r\n\r\nexport const todosState = (state: RootState) => state.todos;\r\nexport const activeTodoItems = (state: RootState) => todosState(state).todos;\r\nexport const completedTodoItems = (state: RootState) => todosState(state).completed;\r\n\r\nexport const fetchedTodosState = (state: RootState) => state.fetchedTodos;\r\nexport const fetchedTodosItems = (state: RootState) => fetchedTodosState(state).todos;\r\nexport const fetchingLoading = (state: RootState) => fetchedTodosState(state).loading;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport { activeTodoItems } from \"../../redux/selectors/todosSelectors\";\r\n\r\nconst TodoList: React.FC = () => {\r\n  const todoItems = useSelector(activeTodoItems);\r\n\r\n  return (\r\n    <div className=\"todo-list-wrapper\">\r\n      <h3 className=\"label-md\">Список задач</h3>\r\n      <div className=\"todo-list\">\r\n        {todoItems.length === 0 ? (\r\n          <h4 className=\"label-md\">Задач не добавлено</h4>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {todoItems.map((todo) => (\r\n          <TodoItem todo={todo} key={todo.id} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport TodoForm from \"../components/Todo/TodoForm\";\r\nimport TodoList from \"../components/Todo/TodoList\";\r\n\r\nconst Main: React.FC = () => (\r\n  <>\r\n    <TodoForm />\r\n    <TodoList />\r\n  </>\r\n);\r\n\r\nexport default Main;\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TodoStatusEnum } from \"../enums/TodoStatusEnum\";\r\nimport { fetchTodos } from \"../redux/actionCreators/todosActions\";\r\nimport { IFetchTodoForm } from \"../interfaces/fetchTodo\";\r\n\r\nconst usersElements: React.ReactNode[] = [];\r\n\r\nfor (let i = 1; i <= 10; i += 1) {\r\n  usersElements.push(\r\n    <option value={i} key={i}>\r\n      {i}\r\n    </option>,\r\n  );\r\n}\r\n\r\nconst FetchTodoForm: React.FC = () => {\r\n  const dispatcher = useDispatch();\r\n\r\n  const [fetchForm, setFetchForm] = useState<IFetchTodoForm>({\r\n    userId: 0,\r\n    completed: 0,\r\n    count: 100,\r\n  });\r\n\r\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    dispatcher(fetchTodos(fetchForm));\r\n  };\r\n\r\n  const inputChangeHandler = (\r\n    event: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>,\r\n  ) => {\r\n    setFetchForm((prevState) => ({\r\n      ...prevState,\r\n      [event.target.name]: Number(event.target.value),\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <form className=\"fetch-form\" onSubmit={submitHandler}>\r\n      <div className=\"input-field\">\r\n        <label htmlFor=\"todo-status\">Статус</label>\r\n        <select\r\n          name=\"completed\"\r\n          id=\"todo-status\"\r\n          className=\"input-select\"\r\n          value={fetchForm.completed}\r\n          onChange={inputChangeHandler}\r\n        >\r\n          <option value=\"0\">Не важно</option>\r\n          <option value={TodoStatusEnum.COMPLETED}>Завершенные</option>\r\n          <option value={TodoStatusEnum.UNCOMPLETED}>Не завершенные</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <label htmlFor=\"todo-user\">Пользователь №</label>\r\n        <select\r\n          name=\"userId\"\r\n          id=\"todo-user\"\r\n          className=\"input-select\"\r\n          onChange={inputChangeHandler}\r\n        >\r\n          <option value=\"0\">Не важно</option>\r\n          {usersElements}\r\n        </select>\r\n      </div>\r\n      <div className=\"input-field\">\r\n        <label htmlFor=\"todo-count\">Количество</label>\r\n        <input\r\n          name=\"count\"\r\n          id=\"todo-count\"\r\n          type=\"number\"\r\n          step={10}\r\n          value={fetchForm.count}\r\n          onChange={inputChangeHandler}\r\n        />\r\n      </div>\r\n      <button\r\n        className=\"p-4 rounded-md bg-yellow-500 text-white mb-4\"\r\n        type=\"submit\"\r\n      >\r\n        Загрузить данные\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FetchTodoForm;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { appTheme } from \"../redux/selectors/appSelectors\";\r\n\r\nconst Loader: React.FC = () => {\r\n  const currentTheme = useSelector(appTheme);\r\n  const loaderColor = currentTheme === \"light\" ? \"text-gray-700\" : \"text-white\";\r\n\r\n  return (\r\n    <div className=\"flex place-content-center my-5 w-full\">\r\n      <svg\r\n        className={`animate-spin ml-1 mr-3 h-12 w-12 ${loaderColor}`}\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <circle\r\n          className=\"opacity-25\"\r\n          cx=\"12\"\r\n          cy=\"12\"\r\n          r=\"10\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"4\"\r\n        />\r\n        <path\r\n          className=\"opacity-75\"\r\n          fill=\"currentColor\"\r\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\n\r\ninterface TodoStatusProps {\r\n  status: boolean;\r\n}\r\n\r\nconst TodoStatus: React.FC<TodoStatusProps> = ({ status }) => {\r\n  const statusIcon = status ? \"fas fa-check-circle\" : \"fas fa-times-circle\";\r\n  const statusColor = status ? \"text-green-500\" : \"text-red-500\";\r\n  const statusText = status ? \"Завершено!\" : \"Надо бы сделать :)\";\r\n\r\n  return (\r\n    <span className={`todo-status ${statusColor}`}>\r\n      <i className={statusIcon} />\r\n      {statusText}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default TodoStatus;\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { IUser } from \"../../interfaces/user\";\r\n\r\nexport const fetchTodoUser = createAction(\"FETCH_TODO_USER\", (id: number) => ({\r\n  payload: { id },\r\n}));\r\nexport const setFetchedUser = createAction(\r\n  \"SET_FETCHED_USER\",\r\n  (user: IUser) => ({ payload: user }),\r\n);\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport TodoStatus from \"./Todo/TodoStatus\";\r\nimport { IFetchedTodo } from \"../interfaces/todo\";\r\nimport { fetchTodoUser } from \"../redux/actionCreators/fetchTodosActions\";\r\nimport { displayModal } from \"../redux/actionCreators/appActions\";\r\n\r\ninterface FetchedTodoItemProps {\r\n  todo: IFetchedTodo;\r\n}\r\n\r\nconst FetchedTodoItem: React.FC<FetchedTodoItemProps> = ({ todo }) => {\r\n  const dispatcher = useDispatch();\r\n\r\n  const clickHandler = () => {\r\n    dispatcher(displayModal());\r\n    dispatcher(fetchTodoUser(todo.userId));\r\n  };\r\n\r\n  return (\r\n    <div className=\"fetched-item\" key={todo.id}>\r\n      <div className=\"fetched-item-content\">\r\n        <h4>{todo.title}</h4>\r\n        <TodoStatus status={todo.completed} />\r\n      </div>\r\n      <button type=\"button\" onClick={clickHandler}>\r\n        <span>Подробнее</span>\r\n        <i className=\"fas fa-address-card\" />\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchedTodoItem;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  fetchedTodosItems,\r\n  fetchingLoading,\r\n} from \"../redux/selectors/todosSelectors\";\r\nimport FetchTodoForm from \"../components/FetchTodoForm\";\r\nimport Loader from \"../components/Loader\";\r\nimport FetchedTodoItem from \"../components/FetchedTodoItem\";\r\n\r\nconst FetchedTodos: React.FC = () => {\r\n  const fetchedTodos = useSelector(fetchedTodosItems);\r\n  const loading = useSelector(fetchingLoading);\r\n\r\n  return (\r\n    <div className=\"fetched-list-wrapper\">\r\n      <h1 className=\"label-md\">Тестовые данные</h1>\r\n      <div className=\"fetched-list\">\r\n        <FetchTodoForm />\r\n        <div className=\"md:ml-4 md:w-2/3\">\r\n          <h4 className=\"label-md\">\r\n            {fetchedTodos.length === 0 ? \"Записей нет\" : \"Записи\"}\r\n          </h4>\r\n          <div className=\"fetched-items\">\r\n            {loading ? (\r\n              <Loader />\r\n            ) : (\r\n              fetchedTodos.map((todo) => (\r\n                <FetchedTodoItem todo={todo} key={todo.id} />\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchedTodos;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport TodoItem from \"../components/Todo/TodoItem\";\r\nimport { completedTodoItems } from \"../redux/selectors/todosSelectors\";\r\n\r\nconst CompletedTodos: React.FC = () => {\r\n  const completedTodos = useSelector(completedTodoItems);\r\n\r\n  return (\r\n    <div className=\"todo-list-wrapper\">\r\n      <h3 className=\"label-md\">Список завершённых задач</h3>\r\n      <div className=\"todo-list\">\r\n        {completedTodos.length === 0 ? (\r\n          <h4 className=\"label-md\">Задач не добавлено</h4>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        {completedTodos.map((todo) => (\r\n          <TodoItem todo={todo} key={todo.id} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CompletedTodos;\r\n","import React from \"react\";\r\nimport { IUser } from \"../interfaces/user\";\r\n\r\ninterface UserCardProps {\r\n  userData: IUser;\r\n}\r\n\r\nconst UserCard: React.FC<UserCardProps> = ({ userData }) => (\r\n  <div className=\"user-card\">\r\n    <div>\r\n      <span>Имя пользователя:&nbsp;</span>\r\n      {userData.username}\r\n    </div>\r\n    <div>\r\n      <span>Полное имя:&nbsp;</span>\r\n      {userData.name}\r\n    </div>\r\n    <div>\r\n      <span>Электронная почта:&nbsp;</span>\r\n      {userData.email}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { modalContent, modalLoading } from \"../redux/selectors/appSelectors\";\r\nimport UserCard from \"./UserCard\";\r\nimport { hideModal } from \"../redux/actionCreators/appActions\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst CustomModal: React.FC = () => {\r\n  const dispatcher = useDispatch();\r\n  const content = useSelector(modalContent);\r\n  const isLoading = useSelector(modalLoading);\r\n\r\n  const clickHandler = (event: React.SyntheticEvent<HTMLElement>) => {\r\n    event.stopPropagation();\r\n    const target = event.target as HTMLElement;\r\n    if (target.className === \"modal-window\") {\r\n      dispatcher(hideModal());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      role=\"presentation\"\r\n      className=\"modal-window\"\r\n      onClick={clickHandler}\r\n      onKeyUp={clickHandler}\r\n    >\r\n      <div className=\"modal-wrapper\" id=\"modalWindow\">\r\n        {isLoading ? <Loader /> : <UserCard userData={content} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomModal;\r\n","import React, { useEffect } from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport \"./assets/tailwind.css\";\r\nimport \"./assets/scss/app.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport NavigationList from \"./components/Navigation/NavigationList\";\r\nimport Main from \"./views/Main\";\r\nimport FetchedTodos from \"./views/FetchedTodos\";\r\nimport CompletedTodos from \"./views/CompletedTodos\";\r\nimport { appTheme, shouldDisplayModal } from \"./redux/selectors/appSelectors\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport CustomModal from \"./components/CustomModal\";\r\n\r\nconst App: React.FC = () => {\r\n  const theme = useSelector(appTheme);\r\n  const displayModal = useSelector(shouldDisplayModal);\r\n\r\n  useEffect(() => {\r\n    const rootHtmlElement = document.querySelector(\"html\") as HTMLElement;\r\n    if (theme === \"dark\") {\r\n      rootHtmlElement.classList.add(\"dark\");\r\n    } else {\r\n      rootHtmlElement.classList.remove(\"dark\");\r\n    }\r\n  }, [theme]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        <NavigationList />\r\n        <div className=\"todo-wrapper\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Main} />\r\n            <Route path=\"/completed\" component={CompletedTodos} />\r\n            <Route path=\"/fetched\" component={FetchedTodos} />\r\n          </Switch>\r\n        </div>\r\n        <ToastContainer theme={theme} progressClassName=\"bg-yellow-500\" />\r\n      </div>\r\n      {displayModal\r\n        ? <CustomModal />\r\n        : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { call, put, takeLatest } from \"redux-saga/effects\";\r\nimport {\r\n  fetchTodos,\r\n  hideFetchingLoader,\r\n  setFetchedTodos,\r\n  showFetchingLoader,\r\n} from \"./actionCreators/todosActions\";\r\nimport { TodoStatusEnum } from \"../enums/TodoStatusEnum\";\r\nimport { fetchTodoUser } from \"./actionCreators/fetchTodosActions\";\r\nimport {\r\n  disableModalLoading,\r\n  enableModalLoading,\r\n  setModalContent,\r\n} from \"./actionCreators/appActions\";\r\n\r\nasync function fetchTodosFromApi(options: string) {\r\n  const response = await fetch(\r\n    `https://jsonplaceholder.typicode.com/todos?${options}`,\r\n  );\r\n  return await response.json();\r\n}\r\n\r\nasync function fetchUserData(userId: number) {\r\n  const response = await fetch(\r\n    `https://jsonplaceholder.typicode.com/users/${userId}`,\r\n  );\r\n  return await response.json();\r\n}\r\n\r\nfunction defineFetchingTodoOptions(object: Record<string, number>): string {\r\n  const options: string[] = [];\r\n  Object.entries(object).forEach(([optionName, optionValue]) => {\r\n    if (optionValue === 0) {\r\n      return;\r\n    }\r\n    switch (optionName) {\r\n      case \"completed\": {\r\n        const completed = optionValue === TodoStatusEnum.COMPLETED;\r\n        options.push(`${optionName}=${completed}`);\r\n        break;\r\n      }\r\n      case \"count\":\r\n        options.push(`_limit=${optionValue}`);\r\n        break;\r\n      default:\r\n        options.push(`${optionName}=${optionValue}`);\r\n    }\r\n  });\r\n  return options.join(\"&\");\r\n}\r\n\r\n/**\r\n * @todo change payload typing\r\n */\r\nfunction* todosFetchWorker(action: any): any {\r\n  yield put(showFetchingLoader());\r\n  const options = yield defineFetchingTodoOptions(action.payload);\r\n  const todos = yield call(fetchTodosFromApi, options);\r\n  yield put(setFetchedTodos(todos));\r\n  yield put(hideFetchingLoader());\r\n}\r\n\r\nfunction* fetchTodoUserWorker(action: any): any {\r\n  yield put(enableModalLoading());\r\n  const user = yield call(fetchUserData, action.payload.id);\r\n  yield put(setModalContent(user));\r\n  yield put(disableModalLoading());\r\n}\r\n\r\nexport function* sagaWatcher() {\r\n  yield takeLatest(fetchTodos, todosFetchWorker);\r\n  yield takeLatest(fetchTodoUser, fetchTodoUserWorker);\r\n}\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TodosState } from \"../../interfaces/todo\";\r\nimport {\r\n  addTodo,\r\n  completeTodo,\r\n  deleteTodo,\r\n  returnCompletedTodo,\r\n} from \"../actionCreators/todosActions\";\r\n\r\nconst initialState: TodosState = {\r\n  todos: [],\r\n  completed: [],\r\n};\r\n\r\nexport const todosReducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(addTodo, (state, action) => {\r\n      state.todos.push(action.payload);\r\n    })\r\n    .addCase(completeTodo, (state, action) => {\r\n      state.todos = state.todos.filter((todo) => {\r\n        if (todo.id === action.payload.id) {\r\n          todo.completed = true;\r\n          state.completed.push(todo);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      toast(\"Вы молодец!\");\r\n    })\r\n    .addCase(returnCompletedTodo, (state, action) => {\r\n      state.completed = state.completed.filter((todo) => {\r\n        if (todo.id === action.payload.id) {\r\n          todo.completed = false;\r\n          state.todos.push(todo);\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n      toast(\"Бывает! И с этим справитесь!)\");\r\n    })\r\n    .addCase(deleteTodo, (state, action) => {\r\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload.id);\r\n      state.completed = state.completed.filter(\r\n        (todo) => todo.id !== action.payload.id,\r\n      );\r\n    });\r\n});\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { IFetchedTodo } from \"../../interfaces/todo\";\r\nimport {\r\n  hideFetchingLoader,\r\n  setFetchedTodos,\r\n  showFetchingLoader,\r\n} from \"../actionCreators/todosActions\";\r\n\r\ninterface FetchedTodosReducer {\r\n  todos: IFetchedTodo[];\r\n  loading: boolean;\r\n}\r\n\r\nconst initialState: FetchedTodosReducer = {\r\n  todos: [],\r\n  loading: false,\r\n};\r\n\r\nexport const fetchedTodosReducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(setFetchedTodos, (state, action) => {\r\n      state.todos = action.payload;\r\n    })\r\n    .addCase(showFetchingLoader, (state) => {\r\n      state.loading = true;\r\n    })\r\n    .addCase(hideFetchingLoader, (state) => {\r\n      state.loading = false;\r\n    });\r\n});\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  changeAppTheme,\r\n  disableModalLoading,\r\n  displayModal,\r\n  enableModalLoading,\r\n  hideModal,\r\n  setModalContent,\r\n} from \"../actionCreators/appActions\";\r\n\r\ntype ThemeTypes = \"light\" | \"dark\";\r\n\r\ninterface AppReducerState {\r\n  theme: ThemeTypes;\r\n  modal: {\r\n    shouldDisplay: boolean;\r\n    content: any;\r\n    loading: boolean;\r\n  };\r\n}\r\n\r\nconst initialState: AppReducerState = {\r\n  theme: (localStorage.getItem(\"app-theme\") as ThemeTypes) ?? \"light\",\r\n  modal: {\r\n    shouldDisplay: false,\r\n    content: \"\",\r\n    loading: false,\r\n  },\r\n};\r\n\r\nexport const appReducer = createReducer(initialState, (builder) => {\r\n  builder\r\n    .addCase(changeAppTheme, (state) => {\r\n      if (state.theme === \"light\") {\r\n        state.theme = \"dark\";\r\n      } else {\r\n        state.theme = \"light\";\r\n      }\r\n      localStorage.setItem(\"app-theme\", state.theme);\r\n    })\r\n    .addCase(displayModal, (state) => {\r\n      state.modal.shouldDisplay = true;\r\n    })\r\n    .addCase(hideModal, (state) => {\r\n      state.modal.shouldDisplay = false;\r\n    })\r\n    .addCase(setModalContent, (state, action) => {\r\n      state.modal.content = action.payload;\r\n    })\r\n    .addCase(enableModalLoading, (state) => {\r\n      state.modal.loading = true;\r\n    })\r\n    .addCase(disableModalLoading, (state) => {\r\n      state.modal.loading = false;\r\n    });\r\n});\r\n","import { combineReducers } from \"redux\";\r\nimport { todosReducer } from \"./todosReducer\";\r\nimport { fetchedTodosReducer } from \"./fetchedTodosReducer\";\r\nimport { appReducer } from \"./appReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  todos: todosReducer,\r\n  fetchedTodos: fetchedTodosReducer,\r\n  app: appReducer,\r\n});\r\n","import createSagaMiddleware from \"redux-saga\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport { sagaWatcher } from \"./sagas\";\r\nimport { rootReducer } from \"./reducers/rootReducer\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middlewares = [sagaMiddleware];\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({ thunk: false }).concat(middlewares),\r\n});\r\n\r\nsagaMiddleware.run(sagaWatcher);\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}